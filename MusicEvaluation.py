from __future__ import print_function
import numpy as np
from glob import glob
import os
import numpy
import pylab
import sys
# path = 'C:\Users\ben\Desktop\Deep_learning_Project_music\midi'
# sys.path.append(path)
# from midi.utils import midiread, midiwrite
import matplotlib.pyplot as plt

path = 'C:\Users\ben\Desktop\Deep_learning_Project_music\mgeval'
sys.path.append(path)
# import os
# cwd = os.getcwd()
import midi
import numpy as np
import pretty_midi
import seaborn as sns
import matplotlib.pyplot as plt
from mgeval import core, utils
from sklearn.model_selection import LeaveOneOut

## 'bar_pitch_class_histogram' no found problem 


def calculate_metrics(Music_rnn_rbm,num_samples ) :
    
    set1_eval = {
    'total_used_pitch':np.zeros((num_samples,1)),
    'bar_used_pitch':np.zeros((num_samples,1)), 
    'total_used_note':np.zeros((num_samples,1)),
    'bar_used_note':np.zeros((num_samples,1)),
    'total_pitch_class_histogram':np.zeros((num_samples,1)),
    'pitch_class_transition_matrix':np.zeros((num_samples,1)),
    'pitch_range':np.zeros((num_samples,1)), 
    'avg_pitch_shift':np.zeros((num_samples,1)), 
    'avg_IOI':np.zeros((num_samples,1)),
    'note_length_hist':np.zeros((num_samples,1)), 
    'note_length_transition_matrix':np.zeros((num_samples,1))}
    
    metrics_list = [
    'total_used_pitch',
    'bar_used_pitch', 
    'total_used_note',
    'bar_used_note',
    'total_pitch_class_histogram',
    'pitch_class_transition_matrix',
    'pitch_range', 
    'avg_pitch_shift', 
    'avg_IOI',
    'note_length_hist', 
    'note_length_transition_matrix']
    
    for i in range(0, num_samples):
    # for i in range(0, 1):
        feature = core.extract_feature(Music_rnn_rbm[i])
        for j in metrics_list : 
            # print(j)
            s = np.mean(getattr(core.metrics(), j)(feature))
            set1_eval[j][i] = s
            # print(s)
        # s = getattr(core.metrics(), metrics_list[0])(feature)
        # print("S = ", s)
        # set1_eval[metrics_list[0]][i] = getattr(core.metrics(), metrics_list[0])(feature)
    
    # print(set1_eval)
    
    
    set1_final = {
    'total_used_pitch': [5,5],
    'bar_used_pitch':[5,5],
    'total_used_note':[5,5],
    'bar_used_note':[5,5],
    'total_pitch_class_histogram':[5,5],
    'pitch_class_transition_matrix':[5,5],
    'pitch_range':[5,5],
    'avg_pitch_shift':[5,5], 
    'avg_IOI':[5,5],
    'note_length_hist':[5,5],
    'note_length_transition_matrix':[5,5],}
    
    for j in metrics_list : 
        set1_final[j][0] =  np.mean(set1_eval[j])
        set1_final[j][1] =  np.std(set1_eval[j])
        
    return set1_final

def print_heatmap(matrix):

    plt.figure()
    plt.imshow(matrix, cmap='hot', interpolation='nearest')
    plt.show()


def get_PCTM(Music_rnn_rbm,num_samples ) :

    metrics_list = [
    'pitch_class_transition_matrix',
    'note_length_transition_matrix']
    
    Matrix_sum = np.zeros((12,12))
    for i in range(0, num_samples):
    # for i in range(0, 1):
        feature = core.extract_feature(Music_rnn_rbm[i])
        s = getattr(core.metrics(), metrics_list[0])(feature)
        Matrix_sum = np.add(Matrix_sum, s)
        # print(s)
    Matrix_sum = Matrix_sum / num_samples
    print(Matrix_sum)
    print_heatmap(Matrix_sum)
    return Matrix_sum
  
def get_NLTM(Music_rnn_rbm,num_samples ) :

    metrics_list = [
    'pitch_class_transition_matrix',
    'note_length_transition_matrix']
    
    Matrix_sum = np.zeros((12,12))
    for i in range(0, num_samples):
    # for i in range(0, 1):
        feature = core.extract_feature(Music_rnn_rbm[i])
        s = getattr(core.metrics(), metrics_list[1])(feature)
        Matrix_sum = np.add(Matrix_sum, s)
        # print(s)
    Matrix_sum = Matrix_sum / num_samples
    print(Matrix_sum)
    print_heatmap(Matrix_sum)
    return Matrix_sum
    
    

# Path for melodies generated by RNN-RBM 
path_rnn_rbm = 'Maestro2017Generated/*.mid'
Music_rnn_rbm =  glob(path_rnn_rbm)
num_samples = len(Music_rnn_rbm)

# get_PCTM(Music_rnn_rbm,num_samples ) 
# print()
get_NLTM(Music_rnn_rbm,num_samples )
print()
# finalmetrics = calculate_metrics(Music_rnn_rbm,num_samples ) 
# 
# print()
# print(finalmetrics)

# Path for melodies generated by LSTM
path_lstm = 'Midi1Generated/*.mid'
Music_lstm =  glob(path_lstm)
num_samples = len(Music_lstm)

# get_PCTM(Music_lstm,num_samples ) 
# print()
get_NLTM(Music_lstm,num_samples )
print()
# finalmetrics = calculate_metrics(Music_lstm,num_samples ) 
# print()
# print(finalmetrics)




# 
#  RNN-RBM
# {'bar_used_pitch': [11.211666666666666, 1.000848251345938], 'total_used_note': [366.10000000000002, 38.845720485016109], 'note_length_transition_matrix': [2.5354166666666664, 0.26976194781261187], 'avg_IOI': [0.16494630330128329, 0.017167106616163882], 'bar_used_note': [12.203333333333333, 1.2948573495005369], 'avg_pitch_shift': [14.841269939799727, 0.93768917262146967], 'pitch_range': [73.0, 3.687817782917155], 'total_pitch_class_histogram': [0.083333333333333329, 8.7770836714417528e-18], 'note_length_hist': [0.083333333333333315, 1.3877787807814457e-17], 'total_used_pitch': [63.549999999999997, 2.6358110706194404], 'pitch_class_transition_matrix': [4.6444444444444439, 1.0558195941694293]}
# LSTM
# {'bar_used_pitch': [1.7222222222222221, 0.80974942389831517], 'total_used_note': [524.39999999999998, 77.348173863382186], 'note_length_transition_matrix': [3.634722222222222, 0.53714009627348747], 'avg_IOI': [0.24196518914368009, 0.024615580221981802], 'bar_used_note': [8.3238095238095262, 1.2277487914822569], 'avg_pitch_shift': [1.0999789081026452, 1.2646738815783691], 'pitch_range': [21.800000000000001, 16.554757624320569], 'total_pitch_class_histogram': [0.083333333333333329, 6.2063353831181823e-18], 'note_length_hist': [0.083333333333333315, 1.3877787807814457e-17], 'total_used_pitch': [13.1, 10.420652570736634], 'pitch_class_transition_matrix': [3.9871527777777778, 1.6573004690503486]}



